// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from '@/types/supabase';

// Initialize the Supabase client with proper headers
const supabaseUrl = 'https://weujfmfubskndhvokixy.supabase.co';

// CRITICAL FIX: Force the use of a known valid Supabase JWT token
// DO NOT commit this to production, this is a development fix only
const CORRECT_JWT_TOKEN = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6IndldWpmbWZ1YnNrbmRodm9raXh5Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDAxMjE0MDksImV4cCI6MjA1NTY5NzQwOX0.EMoSBYSzv8JBjSUW49u2qDTcGvlrHC8WZ76yF3pKkRs';

console.log('[Supabase] Creating client with hardcoded key to guarantee authentication works');

// Create a singleton instance of the Supabase client
const createSupabaseClient = () => {
  // Report initialization
  console.log(`[Supabase] Initialization with URL: ${supabaseUrl}`);
  console.log(`[Supabase] Using hardcoded JWT token for authentication`);

  try {
    // Clear any potentially corrupted local storage that might interfere with auth
    // Uncomment if persistent issues occur
    /*
    localStorage.removeItem('sb-weujfmfubskndhvokixy-auth-token');
    localStorage.removeItem('ai_law_auth_token');
    localStorage.removeItem('supabase_config_verified');
    console.info('[Supabase] Cleared all auth data for fresh start');
    */
    
    // Create client with enhanced auth persistence
    return createClient<Database>(
      supabaseUrl, 
      CORRECT_JWT_TOKEN,
      {
        auth: {
          persistSession: true,
          autoRefreshToken: true,
          detectSessionInUrl: true,
          storageKey: 'ai_law_auth_token',
          flowType: 'implicit', // Use implicit flow for reliable session handling
        },
        global: {
          headers: {
            'X-Client-Info': 'ai-law-frontend',
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          }
        },
        // Add retry configuration for better reliability
        realtime: {
          params: {
            eventsPerSecond: 10
          }
        }
      }
    );
  } catch (e) {
    console.error('[Supabase] Error creating client:', e);
    // Create a fallback client with minimal config in case of error
    return createClient<Database>(
      supabaseUrl, 
      CORRECT_JWT_TOKEN,
      {
        auth: {
          persistSession: true,
          autoRefreshToken: true,
        }
      }
    );
  }
};

// Create and export a SINGLETON instance
export const supabase = createSupabaseClient();

// Verify connection on startup
(async () => {
  try {
    console.log('[Supabase] Testing connection...');
    // Simple ping to check if Supabase is reachable
    const { error } = await supabase.from('profiles').select('id').limit(1);
    if (error) {
      console.error('[Supabase] Connection error:', error.message);
      if (error.message.includes('Invalid API key') || error.message.includes('JWT')) {
        console.error('[Supabase] JWT token appears invalid in the Supabase project');
      }
    } else {
      console.info('[Supabase] Connection successful ✅');
      sessionStorage.setItem('supabase_config_verified', 'true');
      
      // Additional check for client_files table access
      const { data: clientFilesTest, error: clientFilesError } = await supabase
        .from('client_files')
        .select('id')
        .limit(1);
      
      if (clientFilesError) {
        console.error('[Supabase] Error accessing client_files table:', clientFilesError.message);
      } else {
        console.info('[Supabase] client_files table access successful ✅');
      }
    }
  } catch (e) {
    console.error('[Supabase] Connection test failed:', e);
  }
})();

// Add listener for auth state changes to help with debugging
supabase.auth.onAuthStateChange((event, session) => {
  console.log(`[Supabase Auth] ${event} event:`, session ? 'User authenticated' : 'No session');
  if (session) {
    // Store the successful auth state for recovery
    localStorage.setItem('last_auth_state', 'authenticated');
    localStorage.setItem('last_auth_time', Date.now().toString());
    localStorage.setItem('user_id', session.user.id);
  }
});

// Export the singleton instance
export default supabase;
